@{
    Layout = null;
}



<div id="pendingSection">

    <div class="container bg-white rounded m-2 shadow p-2">
        <h3 class="text-center">Pending Supplier Quotations</h3>

        <div class="d-flex justify-content-between align-items-center mb-3 flex-wrap ">

            <!-- Left: Date Range Picker + Export Buttons -->
            <div class="d-flex align-items-center gap-3">
                <!-- Date Range Picker -->
                <div class="input-group" style="height: 40px; max-width: 280px;">
                    <span class="input-group-text bg-primary text-white" style="height: 100%;">
                        <i class="bi bi-calendar-date"></i>
                    </span>
                    <input type="text" id="PendingDatepicker" class="form-control" placeholder="Select date range" readonly style="height: 100%;" />
                </div>
            </div>

        </div>

        <table id="pendingTable" class="table table-bordered table-striped">
            <thead class="table-dark text-white text-center fw-bold">
                <tr>
                    <th><input type="checkbox" id="selectAll"></th>
                    <th>Sr. No</th>
                    <th>RFQ Code</th>
                    <th>Supplier Quotation Code</th>
                    <th>Date</th>
                    <th>Vendor Name</th>
                    <th>Company</th>
                    <th>Total Amount</th>
                    <th>Action</th>

                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>



<script>
    // ✅ Toast helper
    // ✅ Toast helper with progress bar
    function showToast(message, type = 'warning') {
        const toastId = 'toast-' + Date.now();
        const bg = type === 'warning' ? 'bg-warning text-dark'
            : type === 'success' ? 'bg-success text-white'
                : 'bg-danger text-white';

        const toastHTML = `
      <div id="${toastId}" class="toast align-items-center ${bg} border-0 mb-2 shadow" 
           role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex flex-column w-100">
          <div class="d-flex">
            <div class="toast-body flex-grow-1">${message}</div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" 
                    data-bs-dismiss="toast" aria-label="Close"></button>
          </div>
          <!-- Progress bar -->
          <div class="progress" style="height:3px;">
            <div class="progress-bar bg-dark" role="progressbar" style="width: 100%"></div>
          </div>
        </div>
      </div>
    `;

        $('#toastContainer').append(toastHTML);
        const toastEl = document.getElementById(toastId);
        const bsToast = new bootstrap.Toast(toastEl, { delay: 3000 }); // 3 sec timeout
        bsToast.show();

        // Animate progress bar
        let progressBar = $(toastEl).find('.progress-bar');
        progressBar.animate({ width: "0%" }, 3000, "linear");

        // Remove toast when hidden
        toastEl.addEventListener('hidden.bs.toast', () => {
            $(toastEl).remove();
        });
    }


    var tblPending;

    $(document).ready(function () {

        function loadPendingQuotations() {
            $.ajax({
                url: "/Purchase/AllPendingQuotsDataAMG",
                type: "GET",
                dataType: "json",
                success: function (data) {
                    
                    tblPending = $("#pendingTable").DataTable({
                        destroy: true,
                        data: data,
                        dom: '<"top d-flex justify-content-between align-items-center mb-2"Bf>rtip',
                        buttons: [
                            {
                                extend: 'print',
                                text: '<i class="bi bi-printer text-dark fs-5"></i>',
                                title: "Pending Quotations",
                                action: function (e, dt, button, config) {
                                    if ($('#pendingTable tbody input.row-check:checked').length === 0) {
                                        showToast('Please select at least one row to Print!', 'warning');
                                        return;
                                    }
                                    $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                                },
                                exportOptions: {
                                    rows: function (idx, data, node) { return $(node).find('.row-check').prop('checked'); },
                                    columns: ':visible:not(:first-child):not(:last-child)',
                                    format: {
                                        body: function (data, row, column, node) {
                                            if (column === 1) {
                                                return $('#pendingTable tbody input.row-check:checked').index($(node).closest('tr').find('.row-check')) + 1;
                                            }
                                            return data;
                                        }
                                    }
                                }
                            },
                            {
                                extend: 'pdfHtml5',
                                text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                                title: "Pending Quotations",
                                customize: function (doc) {
                                    doc.styles.tableHeader = { fillColor: '#000000', color: 'white', alignment: 'center' };
                                },
                                action: function (e, dt, button, config) {
                                    if ($('#pendingTable tbody input.row-check:checked').length === 0) {
                                        showToast('Please select at least one row to export PDF!', 'warning');
                                        return;
                                    }
                                    $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                                },
                                exportOptions: {
                                    rows: function (idx, data, node) { return $(node).find('.row-check').prop('checked'); },
                                    columns: ':visible:not(:first-child):not(:last-child)',
                                    format: {
                                        body: function (data, row, column, node) {
                                            if (column === 1) {
                                                return $('#pendingTable tbody input.row-check:checked').index($(node).closest('tr').find('.row-check')) + 1;
                                            }
                                            return data;
                                        }
                                    }
                                }
                            },
                            {
                                extend: 'excelHtml5',
                                text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                                title: "Pending Quotations",
                                action: function (e, dt, button, config) {
                                    if ($('#pendingTable tbody input.row-check:checked').length === 0) {
                                        showToast('Please select at least one row to export Excel!', 'warning');
                                        return;
                                    }
                                    $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                                },
                                exportOptions: {
                                    rows: function (idx, data, node) { return $(node).find('.row-check').prop('checked'); },
                                    columns: ':visible:not(:first-child):not(:last-child)',
                                    format: {
                                        body: function (data, row, column, node) {
                                            if (column === 1) {
                                                return $('#pendingTable tbody input.row-check:checked').index($(node).closest('tr').find('.row-check')) + 1;
                                            }
                                            return data;
                                        }
                                    }
                                }
                            },
                            {
                                extend: 'csvHtml5',
                                text: '<i class="bi bi-filetype-csv text-primary fs-5"></i>',
                                title: "Pending Quotations",
                                action: function (e, dt, button, config) {
                                    if ($('#pendingTable tbody input.row-check:checked').length === 0) {
                                        showToast('Please select at least one row to export CSV!', 'warning');
                                        return;
                                    }
                                    $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                                },
                                exportOptions: {
                                    rows: function (idx, data, node) { return $(node).find('.row-check').prop('checked'); },
                                    columns: ':visible:not(:first-child):not(:last-child)',
                                    format: {
                                        body: function (data, row, column, node) {
                                            if (column === 1) {
                                                return $('#pendingTable tbody input.row-check:checked').index($(node).closest('tr').find('.row-check')) + 1;
                                            }
                                            return data;
                                        }
                                    }
                                }
                            },
                            
                        ],
                        columns: [
                            {
                                data: null,
                                orderable: false,
                                render: () => `<input type="checkbox" class="row-check">`
                            },
                            { data: null, render: (data, type, row, meta) => meta.row + 1 },
                            { data: "RFQCode" },
                            { data: "RegisterQuotationCode" },
                            {
                                data: "AddedDate", type: "string",   // ✅ override datetime detection
 render: function (data, type, row) {
                                    if (!data) return "";

                                    let dateObj = new Date(data);

                                    // fallback if parsing fails
                                    if (isNaN(dateObj)) return data;

                                    // ✅ format as dd/MM/yyyy
                                    let dd = String(dateObj.getDate()).padStart(2, "0");
                                    let mm = String(dateObj.getMonth() + 1).padStart(2, "0");
                                    let yyyy = dateObj.getFullYear();
                                    return `${dd}/${mm}/${yyyy}`;
                                } },
                            { data: "VenderName" },
                            { data: "CompanyName" },
                            {
                                data: "TotalAmount",
                                render: data => parseFloat(data).toLocaleString('en-IN', { style: 'currency', currency: 'INR' })
                            },
                            {
                                data: null,
                                orderable: false,
                                render: function (data, type, row) {
                                    let amount = parseFloat(row.TotalAmount);
                                    let isHighAmount = amount > 500000;

                                    let approveIcon = isHighAmount
                                        ? `<i class="bi bi-send-fill text-warning action-approve"
                   data-bs-toggle="tooltip" data-bs-placement="top" 
                   title="Send Approve Request"
                   style="cursor:pointer; font-size:18px;" 
                   data-id="${row.RegisterQuotationCode}"></i>`
                                        : `<i class="bi bi-check-circle text-success action-approve"
                   data-bs-toggle="tooltip" data-bs-placement="top" 
                   title="Approve"
                   style="cursor:pointer; font-size:18px;" 
                   data-id="${row.RegisterQuotationCode}"></i>`;

                                    return `
            <div class="d-flex gap-3 justify-content-center">
                <button class="btn btn-sm">${approveIcon}</button>
                <i class="bi bi-eye btn btn-sm text-primary btn-view"
                   data-bs-toggle="tooltip" data-bs-placement="top" 
                   title="View Details"
                   style="cursor:pointer; font-size:18px;" 
                   data-id="${row.RegisterQuotationCode}"></i>
            </div>
        `;
                                }
                            }
                        ],
                        drawCallback: function () {
                            $('[data-bs-toggle="tooltip"]').tooltip();
                        },
                        initComplete: function () {
                            $('#pendingTable_filter').addClass('ms-auto');
                            $('#pendingTable_filter input')
                                .addClass('form-control ms-2')
                                .css('width', '250px');
                            $('.dt-buttons').addClass('d-flex gap-2');
                        }
                    });

                    $('#selectAll').off('change').on('change', function () {
                        $('#pendingTable tbody input.row-check').prop('checked', $(this).prop('checked'));
                    });
                }
            });
        }

        loadPendingQuotations();

        // Approve icon click
        $(document).on("click", ".action-approve", function () {
            var id = $(this).data("id");
            var row = $(this).closest('tr');
            var amountText = row.find('td').eq(7).text().replace(/[^\d.]/g, '');
            var amount = parseFloat(amountText);
            var url = amount > 500000 ? "/Purchase/ApproveRequestAdminAMG" : "/Purchase/ApproveQuotAMG";
            var vname = row.find('td').eq(5).text();
            var msg = amount > 500000
                ? `Send quotation <b>${id}</b> for admin approval?`
                : `Approve quotation <b>${id}</b> ?`;

            Swal.fire({
                title: 'Are you sure?',
                html: msg,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, proceed!', 
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.post(url, { quotationCode: id }, function (res) {
                        Swal.fire('Done!', res.message, 'success');
                        loadPendingQuotations();
                    }).fail(function () {
                        Swal.fire('Error', 'Something went wrong', 'error');
                    });
                }
            });
        });
    });

    // Initialize Pending Date Range Picker
    $('#PendingDatepicker').daterangepicker({
        autoUpdateInput: false,
        opens: "center",
        drops: "down",
        locale: { cancelLabel: 'Clear' },
        ranges: {
            'Today': [moment(), moment()],
            'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
            'Last 7 Days': [moment().subtract(6, 'days'), moment()],
            'Last 30 Days': [moment().subtract(29, 'days'), moment()],
            'This Month': [moment().startOf('month'), moment().endOf('month')],
            'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
        }
    }, function (start, end) {
        $('#PendingDatepicker').val(start.format('YYYY-MM-DD') + ' - ' + end.format('YYYY-MM-DD'));

        // Filter Pending Table
        $.fn.dataTable.ext.search.push(function (settings, data) {
            if (settings.nTable.id !== 'pendingTable') return true; // only for pendingTable
            var addedDate = moment(data[4], 'MM/DD/YYYY'); // column index 4 = Date
            return addedDate.isBetween(start, end, undefined, '[]');
        });

        tblPending.draw();
        $.fn.dataTable.ext.search.pop();
    });

    // Clear filter on cancel
    $('#PendingDatepicker').on('cancel.daterangepicker', function () {
        $(this).val('');
        tblPending.draw();
    });



</script>

