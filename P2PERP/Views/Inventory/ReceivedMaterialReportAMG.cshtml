@{
    ViewBag.Title = "Received Material Report";
    Layout = "~/Views/Shared/_InventoryLayout.cshtml";
}


<style>
    #receivedTable th, #receivedTable td {
        text-align: center !important;
        vertical-align: middle !important;
    }
    .chart-card {
        background: #fff;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.1);
        min-height: 350px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .chart-title {
        text-align: center;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .hidden-clm {
        display: none;
    }

    .control-container {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        gap: 15px;
    }

    .left-controls {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .dt-buttons {
    }
    

</style>

<div id="receivedSection" class="container-fluid">

    <div class="container bg-white rounded m-2 shadow p-2">
        <h2 class="text-center">Received Material Report</h2>

        <!-- Charts -->
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="chart-card">
                    <div class="chart-title">Top 10 Items by Quantity</div>
                    <div id="itemsChart" style="width:100%; height:100%;"></div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="chart-card">
                    <div class="chart-title">Bin Assignment Status</div>
                    <div id="binStatusChart" style="width:100%; height:100%;"></div>
                </div>
            </div>
        </div>

        <!-- Control Container -->
        <div class="control-container">
            <!-- Left side: Datepicker + Buttons -->
            <div class="left-controls">
                <!-- Datepicker -->
                <div class="input-group" style="height:40px; max-width:280px;">
                    <span class="input-group-text bg-primary text-white" style="height:100%;">
                        <i class="bi bi-calendar-date"></i>
                    </span>
                    <input type="text" id="ReceivedDatepicker" class="form-control" placeholder="Select date range" readonly style="height:100%;" />
                </div>

                <!-- Buttons Container
                            <div id="dtButtonsContainer" class="dt-buttons"></div>
            -->
            </div>

            <!-- Right side: Search input -->
            <div class="right-controls">
                <div id="dtSearchContainer" class="dt-search"></div>
            </div>
        </div>

        <!-- Table -->
        <table id="receivedTable" class="table table-bordered table-striped" style="width:100%">
            <thead class="table-dark text-white text-center fw-bold">
                <tr>
                    <th><input type="checkbox" id="selectAllReceived"></th>
                    <th>Sr. No</th>
                    <th>Received Date</th>
                    <th class="hidden-clm">GRN Code</th>
                    <th class="hidden-clm">PO Code</th>
                    <th>Item Code</th>
                    <th>Item Name</th>
                    <th>Item Category</th>
                    <th>Ordered Qty</th>
                    <th>Received Qty</th>
                    <th>Warehouse</th>
                    <th>Bin Code</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>

<!-- Bin Modal -->
<div class="modal fade" id="binModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="binModalTitle">Bin Assignment Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <table id="binDetailTable" class="display" style="width:100%">
                    <thead>
                        <tr>
                            <th>Received Date</th>
                            <th>Item Code</th>
                            <th>Item Name</th>
                            <th>Item Category</th>
                            <th>Received Qty</th>
                            <th>Warehouse</th>
                            <th>Bin Code</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div id="toastContainer" class="position-fixed top-0 end-0 p-3" style="z-index:9999;"></div>

<script>
    let receivedTable, allData = [];

    function showToast(message, type = 'warning') {
        const toastId = 'toast-' + Date.now();
        const bg = type === 'warning' ? 'bg-warning text-dark' : (type === 'success' ? 'bg-success text-white' : 'bg-danger text-white');
        const html = `<div id="${toastId}" class="toast align-items-center ${bg} border-0 mb-2 shadow" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="d-flex flex-column w-100">
        <div class="d-flex">
            <div class="toast-body flex-grow-1">${message}</div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
        <div class="progress" style="height:3px;">
            <div class="progress-bar bg-dark" role="progressbar" style="width:100%"></div>
        </div>
    </div>
</div>`;
        $('#toastContainer').append(html);
        const bsToast = new bootstrap.Toast(document.getElementById(toastId), { delay: 3000 });
        bsToast.show();
        $(`#${toastId} .progress-bar`).animate({ width: "0%" }, 3000, "linear");
        document.getElementById(toastId).addEventListener('hidden.bs.toast', () => $(document.getElementById(toastId)).remove());
    }

    // Create / reload DataTable
    function loadReceivedTable(fromDate, toDate) {
        if (receivedTable) receivedTable.destroy();
        receivedTable = $('#receivedTable').DataTable({
            ajax: { url: '/Inventory/GetReceivedMaterialReportAMG', data: { fromDate, toDate }, dataSrc: 'data' },
            dom: '<"top d-flex justify-content-between mt-3 mb-2"Bf>rtip',
            buttons: [
                {
                    extend: 'print', text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                    title: 'Received Material',
                    action: function (e, dt, button, config) {
                        if ($('#receivedTable tbody input.row-check:checked').length === 0) {
                            showToast("Please select at least one row to Print!"); return;
                        }
                        $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                    },
                    exportOptions: {
                        rows: function (idx, data, node) { return $(node).find('.row-check').prop('checked'); },
                        columns: ':visible:not(:first-child)',
                        format: {
                            body: function (data, row, column, node) {
                                if (column === 1) {
                                    return $('#receivedTable tbody input.row-check:checked').index($(node).closest('tr').find('.row-check')) + 1;
                                }
                                return data;
                            }
                        }
                    }
                },
                {
                    extend: 'pdfHtml5', text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                    title: 'Received Material',
                    customize: function (doc) {
                        // Black header, white text
                        doc.styles.tableHeader = {
                            fillColor: '#000000',
                            color: '#ffffff',
                            alignment: 'center',
                            bold: true
                        };
                    },
                    action: function (e, dt, button, config) {
                        if ($('#receivedTable tbody input.row-check:checked').length === 0) {
                            showToast("Please select at least one row to export PDF!"); return;
                        }
                        $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                    },
                    exportOptions: {
                        rows: function (idx, data, node) { return $(node).find('.row-check').prop('checked'); },
                        columns: ':visible:not(:first-child)',
                        format: {
                            body: function (data, row, column, node) {
                                if (column === 1) {
                                    return $('#receivedTable tbody input.row-check:checked').index($(node).closest('tr').find('.row-check')) + 1;
                                }
                                return data;
                            }
                        }
                    }
                },
                {
                    extend: 'excelHtml5', text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                    title: 'Received Material',
                    action: function (e, dt, button, config) {
                        if ($('#receivedTable tbody input.row-check:checked').length === 0) {
                            showToast("Please select at least one row to export Excel!"); return;
                        }
                        $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                    },
                    exportOptions: {
                        rows: function (idx, data, node) { return $(node).find('.row-check').prop('checked'); },
                        columns: ':visible:not(:first-child)',
                        format: {
                            body: function (data, row, column, node) {
                                if (column === 1) {
                                    return $('#receivedTable tbody input.row-check:checked').index($(node).closest('tr').find('.row-check')) + 1;
                                }
                                return data;
                            }
                        }
                    }
                },
                {
                    extend: 'csvHtml5', text: '<i class="bi bi-filetype-csv text-primary fs-5"></i>',
                    title: 'Received Material',
                    action: function (e, dt, button, config) {
                        if ($('#receivedTable tbody input.row-check:checked').length === 0) {
                            showToast("Please select at least one row to export CSV!"); return;
                        }
                        $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                    },
                    exportOptions: {
                        rows: function (idx, data, node) { return $(node).find('.row-check').prop('checked'); },
                        columns: ':visible:not(:first-child)',
                        format: {
                            body: function (data, row, column, node) {
                                if (column === 1) {
                                    return $('#receivedTable tbody input.row-check:checked').index($(node).closest('tr').find('.row-check')) + 1;
                                }
                                return data;
                            }
                        }
                    }
                },
                
            ],
            columns: [
                { data: null, orderable: false, render: () => `<input type="checkbox" class="row-check">` },
                { data: null, render: (data, type, row, meta) => meta.row + 1 },
                { data: 'ReceivedDate', render: data => moment(data).format('DD-MM-YYYY') },
                { data: 'GRNCode', visible: false },
                { data: 'POCode', visible: false },
                { data: 'ItemCode' },
                { data: 'ItemName' },
                { data: 'ItemCategory' },
                { data: 'GRNQuantity' },
                { data: 'ReceivedQuantity' },
                { data: 'WarehouseName' },
                { data: 'BinCode' }
            ],
            initComplete: function () {
                this.api().buttons().container().appendTo('#dtButtonsContainer');
                $('#selectAllReceived').off('change').on('change', function () {
                    $('#receivedTable tbody input.row-check').prop('checked', $(this).prop('checked'));
                });
            

                // bind select all checkbox
                $('#selectAllReceived').off('change').on('change', function () {
                    $('#receivedTable tbody input.row-check').prop('checked', $(this).prop('checked'));
                });
            }
        });
    }

    // Helper to apply/remove only the bin filter (we tag the function with _isBinFilter)
    function applyBinFilter(showAssigned) {
        // Remove any existing bin filter(s)
        $.fn.dataTable.ext.search = $.fn.dataTable.ext.search.filter(f => !f._isBinFilter);

        // If showAssigned is null -> just clear bin filter and redraw
        if (showAssigned === null) {
            receivedTable.draw();
            return;
        }

        // New bin filter
        const binFilter = function (settings, data/*row array*/, dataIndex) {
            if (settings.nTable.id !== 'receivedTable') return true; // other tables unaffected
            // BinCode column index is 11 (0-based array of displayed columns)
            const bin = (data[11] || "").toString().trim().toLowerCase();
            return showAssigned
                ? (bin !== "" && bin !== "bin not assigned yet")
                : (bin === "" || bin === "bin not assigned yet");
        };
        // mark it so we can remove it later
        binFilter._isBinFilter = true;

        $.fn.dataTable.ext.search.push(binFilter);
        receivedTable.draw();
    }

    // Load charts and attach click + dblclick handlers to pie
    function loadCharts(fromDate, toDate) {
        $.getJSON('/Inventory/GetReceivedMaterialReportAMG', { fromDate, toDate }, function (result) {
            allData = result.data || [];

            // Top 10 Items
            const itemMap = {};
            allData.forEach(d => { itemMap[d.ItemName] = (itemMap[d.ItemName] || 0) + (Number(d.ReceivedQuantity) || 0); });
            const topItems = Object.entries(itemMap).sort((a, b) => b[1] - a[1]).slice(0, 10);

            Highcharts.chart('itemsChart', {
                chart: { type: 'column', height: 300 },
                title: { text: '' },
                xAxis: { categories: topItems.map(x => x[0]), title: { text: 'Item Name' } },
                yAxis: { min: 0, title: { text: 'Received Qty' } },
                series: [{ name: 'Received Qty', data: topItems.map(x => x[1]) }],
                credits: { enabled: false }
            });

            // Bin Status counts
            let assigned = 0, notAssigned = 0;
            allData.forEach(d => {
                const bin = d.BinCode ? d.BinCode.toString().trim().toLowerCase() : "";
                if (bin !== "" && bin !== "bin not assigned yet") assigned++; else notAssigned++;
            });

            // Create pie chart and keep reference
            const binChart = Highcharts.chart('binStatusChart', {
                chart: { type: 'pie', height: 300 },
                title: { text: '' },
                tooltip: { pointFormat: '<b>{point.y}</b>' },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        dataLabels: { enabled: true, format: '{point.name}: {point.y}' },
                        // use point.events.click inside plotOptions.point
                        point: {
                            events: {
                                click: function () {
                                    // When user clicks a slice -> apply filter on main table
                                    const showAssigned = this.name === 'Assigned to Bin';
                                    applyBinFilter(showAssigned);
                                }
                            }
                        }
                    }
                },
                series: [{
                    name: 'Count', colorByPoint: true, data: [
                        { name: 'Assigned to Bin', y: assigned },
                        { name: 'Not Assigned to Bin', y: notAssigned }
                    ]
                }],
                credits: { enabled: false }
            });

            // Double-click on the chart container resets the bin filter
            if (binChart && binChart.container) {
                // remove previous dblclick listeners to avoid duplicates
                try { binChart.container.removeEventListener('dblclick', binChart._dblClickHandler); } catch (e) { }
                binChart._dblClickHandler = function () { applyBinFilter(null); };
                binChart.container.addEventListener('dblclick', binChart._dblClickHandler);
            }
        });
    }

    $(document).ready(function () {
        $('#binDetailTable').DataTable(); // still ok to have modal's table ready
        loadReceivedTable();
        loadCharts();

        $('#ReceivedDatepicker').daterangepicker({
            autoUpdateInput: false,
            opens: "center",
            drops: "down",
            ranges: {
                'Today': [moment(), moment()],
                'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                'This Month': [moment().startOf('month'), moment().endOf('month')],
                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
            },
            locale: { cancelLabel: 'Clear' }
        }, function (start, end) {
            $('#ReceivedDatepicker').val(start.format('YYYY-MM-DD') + ' - ' + end.format('YYYY-MM-DD'));

            // Apply date filter for table display (this filter only active for immediate draw)
            $.fn.dataTable.ext.search.push(function (settings, data) {
                if (settings.nTable.id !== 'receivedTable') return true;
                const receivedDate = moment(data[2], 'DD-MM-YYYY');
                return receivedDate.isBetween(start, end, undefined, '[]');
            });
            receivedTable.draw();
            // remove that date filter (so it doesn't persist accidentally)
            $.fn.dataTable.ext.search.pop();

            // reload charts using the selected date range
            loadCharts(start.format('YYYY-MM-DD'), end.format('YYYY-MM-DD'));
        });

        $('#ReceivedDatepicker').on('cancel.daterangepicker', function () {
            $(this).val('');
            receivedTable.draw();
            loadCharts();
        });
        // Assuming your first column (index 0) is Serial No
        receivedTable.on('draw.dt', function () {
            var pageInfo = receivedTable.page.info();
            receivedTable.column(1, { page: 'current' }).nodes().each(function (cell, i) {
                cell.innerHTML = i + 1 + pageInfo.start;
            });
        });

    });
</script>
