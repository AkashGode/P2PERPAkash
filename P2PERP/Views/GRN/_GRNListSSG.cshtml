@{
    Layout = null;
}

<!-- ✅ Toast Container (toastr does this automatically) -->
<div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3" style="z-index:1100;"></div>

<div class="card shadow p-3">
    <h4 class="text-primary text-center fw-bolder">GRN LIST</h4>

    <!-- Date Picker -->
    <div class="d-flex justify-content-between align-items-center mb-3 flex-wrap">
        <div class="input-group" style="height: 40px; max-width: 280px;">
            <span class="input-group-text bg-primary text-white" style="height: 100%;">
                <i class="bi bi-calendar-date"></i>
            </span>
            <input type="text" id="grnlistdatepicker" class="form-control" placeholder="Select date range" readonly style="height: 100%;" />
        </div>
        <div id="exportContainer" class="d-flex" style="height: 40px; align-items: center;"></div>
    </div>

    <!-- GRN Table -->
    <div class="table-responsive">
        <table id="grnTable" class="table table-bordered table-striped table-hover text-center align-middle">
            <thead class="table-dark">
                <tr>
                    <th><input type="checkbox" id="selectAll"></th>
                    <th>Sr. No.</th>
                    <th>GRN Code</th>
                    <th>PO Code</th>
                    <th>Invoice No</th>
                    <th>Vendor Name</th>
                    <th>Added Date</th>
                    <th>GRN Status</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>

<!-- GRN Details Modal -->
<div class="modal fade" bs-backdrop="true" id="grnDetailsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-primary position-relative py-2">
                <h5 class="modal-title text-white fw-bold text-center m-0" id="grnModalTitle" style="width: 100%;">View GRN</h5>
                <button type="button" class="btn-close btn-close-white position-absolute top-0 end-0 m-2" data-bs-dismiss="modal"></button>
            </div>

            <div class="modal-body" id="grnDetailsModalBody">
                <p class="text-center py-3">Loading...</p>
            </div>
        </div>
    </div>
</div>


<script>
toastr.options = {
    closeButton: true,
    progressBar: true,
    preventDuplicates: true,
    newestOnTop: true,
    positionClass: "toast-top-right",
    timeOut: "3000" // 3 seconds
};

// ✅ Helper functions for toastr
function showInfo(message)   { toastr.info(message, "Info"); }
function showSuccess(message){ toastr.success(message, "Success"); }
function showWarning(message){ toastr.warning(message, "Warning"); }
function showError(message)  { toastr.error(message, "Error"); }

$(document).ready(function () {
    var selectedGRNs = new Set();
    var fromDate = "";
    var toDate = "";

    var table = $('#grnTable').DataTable({
        ajax: {
            url: '@Url.Action("GRNListSSG","GRN")',
            type: 'GET',
            responsive: true,
            data: d => { d.fromDate = fromDate; d.toDate = toDate; },
            dataSrc: function (json) {
                if (json.data.length === 0) showInfo("No records found for selected date range");
                return json.data;
            }
        },
        destroy: true,
        responsive: true,
        columns: [
            {
                data: 'GRNCode',
                orderable: false,
                render: data => `<input type="checkbox" class="rowCheckbox" value="${data}" ${selectedGRNs.has(data) ? 'checked' : ''}>`
            },
            { data: null, render: (d, t, r, m) => m.row + 1 },
            { data: 'GRNCode' },
            { data: 'POCode' },
            { data: 'InvoiceNo' },
            { data: 'VendorName' },
            { data: 'GRNDate' },
            {
                data: 'Status',
                className: 'text-center fw-bold',
                render: function (data) {
                    let statusText = data || 'Unknown';
                    let statusLower = statusText.trim().toLowerCase();
                    let bgColor = '#6c757d';
                    if (statusLower === 'inprocess') bgColor = '#0d6efd';
                    else if (statusLower === 'partiallycompleted') bgColor = '#fd7e14';
                    else if (statusLower === 'completed') bgColor = '#198754';
                    return `<span class="px-2 py-1 rounded text-white" style="background-color:${bgColor}">${statusText}</span>`;
                }

            },
            {
                data: null,
                orderable: false,
                render: function (row) {
                    let assignQCBtn = row.ShowAssignQCButton
                        ? `<button class="btn btn-success btn-sm btnAssignQC" data-grn="${row.GRNCode}">
                             <i class="bi bi-check2-square"></i></button>` : '';
                    return `
                        <div class="d-flex flex-column flex-sm-row gap-1 justify-content-center">
                            <button class="btn btn-info btn-sm btnViewGRN" data-grn="${row.GRNCode}">
                               <i class="bi bi-eye"></i></button>
                            ${assignQCBtn}
                        </div>`;
                }
            }
        ],
        dom:
            '<"row mb-3"<"col-md-6 d-flex gap-2"B><"col-md-6 d-flex justify-content-end"f>>' +
            '<"table-responsive"t>' +
            '<"row mt-3"<"col-md-6"i><"col-md-6 d-flex justify-content-end"p>>',
        buttons: [
            // --- PRINT ---
            {
                extend: 'print',
                text: '<i class="bi bi-printer-fill fs-5"></i>',
                exportOptions: {
                    columns: [ 2, 3, 4, 5, 6, 7], // Skip checkbox column
                    rows: (idx, data, node) => selectedGRNs.has(data.GRNCode)
                },
                customize: function (win) {
                    exportSerialCounter = 0;
                    // S.No. header
                    $(win.document.body).find('table thead tr').prepend('<th>S.No.</th>');
                    // Auto numbering
                    $(win.document.body).find('table tbody tr').each(function () {
                        $(this).prepend('<td>' + (++exportSerialCounter) + '</td>');
                    });
                    // Header styling
                    $(win.document.body).find('table thead th').css({ 'background-color': '#000', 'color': '#fff' });
                    // Table borders
                    $(win.document.body).find('table').css({ 'border': '1px solid black', 'border-collapse': 'collapse' })
                        .find('th, td').css({ 'border': '1px solid black', 'padding': '5px' });
                },
                action: function (e, dt, btn, config) {
                    if (selectedGRNs.size === 0) { showExportWarning(); return; }
                    $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, btn, config);
                    showExportSuccess("Print started");
                }
            },
            {
                extend: 'pdfHtml5',
                text: '<i class="bi bi-file-earmark-pdf fs-5 text-danger"></i>',
                title: `GRN List - ${moment().format("YYYY-MM-DD")}`,
                exportOptions: {
                    columns: [2, 3, 4, 5, 6, 7],
                    rows: (idx, data, node) => selectedGRNs.has(data.GRNCode)
                },
                customize: function (doc) {
                    exportSerialCounter = 0;

                    // Add S.No. header with black background & white text
                    doc.content[1].table.body[0].unshift({
                        text: 'S.No.',
                        bold: true,
                        fillColor: '#000', // black background
                        color: '#fff',     // white text
                        alignment: 'center'
                    });

                    // Add auto-numbering for each row
                    doc.content[1].table.body.forEach((row, idx) => {
                        if (idx === 0) return; // skip header
                        row.unshift({
                            text: (++exportSerialCounter).toString(),
                            alignment: 'center'
                        });
                    });

                    // Apply borders and padding to table
                    doc.content[1].layout = {
                        hLineWidth: () => 1,
                        vLineWidth: () => 1,
                        hLineColor: () => '#000',
                        vLineColor: () => '#000',
                        paddingLeft: () => 5,
                        paddingRight: () => 5,
                        paddingTop: () => 4,
                        paddingBottom: () => 4
                    };

                    // Ensure header cells stay black background + white text
                    doc.content[1].table.body[0].forEach(cell => {
                        cell.fillColor = '#000';
                        cell.color = '#fff';
                    });
                },
                action: function (e, dt, btn, config) {
                    if (selectedGRNs.size === 0) { showExportWarning(); return; }
                    $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, btn, config);
                    showExportSuccess("PDF export completed");
                }
            },

            // --- EXCEL ---
            {
                extend: 'excelHtml5',
                text: '<i class="bi bi-file-earmark-excel fs-5 text-success"></i>',
                title: `GRN List - ${moment().format("YYYY-MM-DD")}`,
                exportOptions: {
                    columns: [2, 3, 4, 5, 6, 7],
                    rows: (idx, data, node) => selectedGRNs.has(data.GRNCode)
                },
                customize: function (xlsx) {
                    var sheet = xlsx.xl.worksheets['sheet1.xml'];
                    exportSerialCounter = 0;
                    $('row:first c', sheet).first().before('<c t="inlineStr" r="A1"><is><t>S.No.</t></is></c>');
                    $('row:gt(0)', sheet).each(function () {
                        var sn = ++exportSerialCounter;
                        $(this).prepend('<c t="inlineStr"><is><t>' + sn + '</t></is></c>');
                    });
                    $('row:first c', sheet).attr('s', '2'); // header style
                },
                action: function (e, dt, btn, config) {
                    if (selectedGRNs.size === 0) { showExportWarning(); return; }
                    $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, btn, config);
                    showExportSuccess("Excel export completed");
                }
            },
            // --- CSV ---
            {
                extend: 'csvHtml5',
                text: '<i class="bi bi-filetype-csv fs-5 text-success"></i>',
                title: `GRN List _${moment().format("YYYY-MM-DD")}`,
                exportOptions: {
                    columns: [2, 3, 4, 5, 6, 7],
                    rows: (idx, data, node) => selectedGRNs.has(data.GRNCode),
                    format: {
                        header: function (data, columnIdx) { return columnIdx === 0 ? 'S.No.' : data; },
                        body: function (data, row, column) { return column === 0 ? ++exportSerialCounter : data; }
                    }
                },
                action: function (e, dt, btn, config) {
                    if (selectedGRNs.size === 0) { showExportWarning(); return; }
                    exportSerialCounter = 0;
                    $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, btn, config);
                    showExportSuccess("CSV export completed");
                }
            }
        ],
        rowCallback: (row, data) => $(row).find('.rowCheckbox').prop('checked', selectedGRNs.has(data.GRNCode))
    });

    // ✅ Checkbox handling
    $(document).on('change', '.rowCheckbox', function () {
        const grn = $(this).val();
        if ($(this).is(':checked')) selectedGRNs.add(grn); else selectedGRNs.delete(grn);
        $('#selectAll').prop('checked',
            table.rows().nodes().to$().find('.rowCheckbox').length ===
            table.rows().nodes().to$().find('.rowCheckbox:checked').length
        );
    });

    $(document).on('change', '#selectAll', function () {
        const checked = $(this).is(':checked');
        table.rows().nodes().to$().find('.rowCheckbox').prop('checked', checked);
        table.rows().data().each(d => {
            if (checked) selectedGRNs.add(d.GRNCode);
            else selectedGRNs.delete(d.GRNCode);
        });
    });

    // ✅ Export validation
    function exportValidation(e, dt, node, config) {
        if (selectedGRNs.size === 0) {
            showWarning("Please select at least one row before exporting");
            return;
        }
        config.exportOptions.rows = function (idx, data) { return selectedGRNs.has(data.GRNCode); };
        $.fn.dataTable.ext.buttons[config.extend].action.call(this, e, dt, node, config);
        showSuccess(config.extend.toUpperCase() + " export completed");
    }

    // ✅ Date range filter
    $('#grnlistdatepicker').daterangepicker({
        autoUpdateInput: false,
        opens: "center",
        drops: "down",
        locale: { format: "DD-MM-YYYY", cancelLabel: "Clear" },
        ranges: {
            "Today": [moment(), moment()],
            "Yesterday": [moment().subtract(1, "days"), moment().subtract(1, "days")],
            "Last 7 Days": [moment().subtract(6, "days"), moment()],
            "Last 30 Days": [moment().subtract(29, "days"), moment()],
            "This Month": [moment().startOf("month"), moment().endOf("month")],
            "Last Month": [moment().subtract(1, "month").startOf("month"), moment().subtract(1, "month").endOf("month")]
        }
    }, function (start, end) {
        fromDate = start.format("YYYY-MM-DD");
        toDate = end.format("YYYY-MM-DD");
        $('#grnlistdatepicker').val(start.format("DD-MM-YYYY") + " - " + end.format("DD-MM-YYYY"));
        table.ajax.reload();
    });
    $('#grnlistdatepicker').on("cancel.daterangepicker", function () {
        $(this).val("");
        fromDate = "";
        toDate = "";
        table.ajax.reload();
    });


   // ✅ View GRN details
$(document).on("click", ".btnViewGRN", function () {
    let grn = $(this).data("grn");
    $("#grnDetailsModalBody").html("<p class='text-center py-3'>Loading...</p>");
    let url = '@Url.Action("ViewGRNSSG","GRN")' + '?GRNCode=' + grn;
    bootstrap.Modal.getOrCreateInstance(document.getElementById('grnDetailsModal')).show();
    $.get(url, html => $("#grnDetailsModalBody").html(html))
        .fail(() => showError("Failed to load GRN details"));
});

// ✅ Assign QC
$(document).on("click", ".btnAssignQC", function () {
    let grn = $(this).data("grn");
    $("#grnDetailsModalBody").html("<p class='text-center py-3'>Loading...</p>");
    bootstrap.Modal.getOrCreateInstance(document.getElementById('grnDetailsModal')).show();
    let url = '@Url.Action("FetchQCSSG","GRN")' + '?GRNCode=' + grn;
    $.get(url, function (html) {
        $("#grnDetailsModalBody").html(html);
        $("#txtGRNCodeQC").val(grn);
    }).fail(function () {
        showError("Failed to load QC items.");
    });
});


});
</script>
