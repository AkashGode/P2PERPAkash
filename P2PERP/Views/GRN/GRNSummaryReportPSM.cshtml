@{
    ViewBag.Title = "GRN Summary Report";
}

<!-- GRN Items Modal -->
<div class="modal fade" id="grnItemsModal" tabindex="-1" aria-labelledby="grnItemsModalLabel" data-bs-backdrop="true" data-bs-keyboard="false" aria-hidden="false">
    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content rounded-4 shadow-lg">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title text-white fw-bold text-center w-100 pb-4" id="grnItemsModalLabel">GRN Items List</h5>
                <button type="button" class="btn-close btn-close-white position-absolute top-0 end-0 m-3 fs-4" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <table id="GRNItemsTablePSM" class="table table-striped table-bordered w-100">
                    <thead class="table-dark">
                        <tr>
                            <th><input type="checkbox" id="selectAllItems" /></th>
                            <th>S.No</th>
                            <th>Item Name</th>
                            <th>Cost Per Unit</th>
                            <th>Unit Quantity</th>
                            <th>Discount</th>
                            <th>Tax Rate</th>
                            <th>Final Amount</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                    <tfoot class="table-active">
                        <tr>
                            <th colspan="7" class="text-end text-info-emphasis">Total:</th>
                            <th></th>
                        </tr>
                    </tfoot>
                </table>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary rounded-3" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="container">
    <div class="card shadow-lg border-0 rounded-4 p-4">
        <!-- Header -->
        <div class="d-flex justify-content-between align-items-center mb-4 flex-wrap">
            <!-- Datepicker LEFT -->
            <div class="mb-2 d-flex gap-2 align-items-center">
                <div class="input-group" style="max-width: 340px;">
                    <span class="input-group-text bg-primary text-white">
                        <i class="bi bi-calendar-date"></i>
                    </span>
                    <input type="text" id="ThirdreportrangePSM" class="form-control" readonly placeholder="Select Date" />
                </div>
            </div>

            <!-- Title -->
            <div class="flex-grow-1 text-center">
                <h4 class="text-primary fw-bold mb-0">
                    <i class="bi bi-pie-chart-fill me-2"></i> GRN Summary Report
                </h4>
            </div>

            <!-- Placeholder Right -->
            <div style="width:280px;"></div>
        </div>

        <!-- Pie Chart -->
        <div class="position-relative border rounded-3 p-3 shadow-sm mb-4">
            <div id="grnPieChartPSM" style="height:400px;"></div>
        </div>

        <!-- GRN Table -->
        <h5 class="text-primary fw-bold text-center mb-3">GRN Detailed Records</h5>
        <div class="table-responsive">
            <table id="GRNSummaryPSM" class="table table-striped table-bordered w-100">
                <thead class="table-dark">
                    <tr>
                        <th><input type="checkbox" id="selectAll" /></th>
                        <th>S.No</th>
                        <th>GRN No</th>
                        <th>PO No</th>
                        <th>Vendor Name</th>
                        <th>Supplier</th>
                        <th>GRN Date</th>
                        <th>Amount</th>
                        <th>GRN Status</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
</div>

<script>
    let table = null, itemsTable = null;
    let currentFrom = null, currentTo = null;

    toastr.options = {
        closeButton: true, progressBar: true, newestOnTop: true,
        positionClass: "toast-top-right", preventDuplicates: true, timeOut: 3000
    };

    // ---------------- DATE PICKER ----------------
    $('#ThirdreportrangePSM').daterangepicker({
        autoUpdateInput: false,
        opens: "right",
        drops: "down",
        locale: { cancelLabel: 'Clear' },
        ranges: {
            'Today': [moment(), moment()],
            'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
            'Last 7 Days': [moment().subtract(6, 'days'), moment()],
            'Last 30 Days': [moment().subtract(29, 'days'), moment()],
            'This Month': [moment().startOf('month'), moment().endOf('month')],
            'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
        }

      }, function (start, end) {
        $('#ThirdreportrangePSM').val(start.format('YYYY-MM-DD') + ' - ' + end.format('YYYY-MM-DD'));
        currentFrom = start.format('YYYY-MM-DD');
        currentTo = end.format('YYYY-MM-DD');
        initTable(currentFrom, currentTo);
        loadPieChart(currentFrom, currentTo);
    });
    $('#ThirdreportrangePSM').on('cancel.daterangepicker', function () {
        $(this).val('');
        currentFrom = null; currentTo = null;
        initTable();
        loadPieChart();
    });

    // ---------------- EXPORT CUSTOMIZATION ----------------
    function buildDatetimeString() {
        var now = new Date();
        return now.getFullYear() + '-' +
            ('0' + (now.getMonth() + 1)).slice(-2) + '-' +
            ('0' + now.getDate()).slice(-2) + ' ' +
            ('0' + now.getHours()).slice(-2) + ':' +
            ('0' + now.getMinutes()).slice(-2) + ':' +
            ('0' + now.getSeconds()).slice(-2);
    }

    function findTableNodeIndex(doc) {
        if (!doc || !doc.content) return -1;
        for (var i = 0; i < doc.content.length; i++) {
            if (doc.content[i] && doc.content[i].table) {
                return i;
            }
        }
        return -1;
    }

    // Generic PDF customization function
    function pdfCustomizeGeneric(doc, title, orientation) {
        orientation = orientation || 'portrait';
        try {
            // set orientation correctly
            doc.pageOrientation = (orientation === 'portrait') ? 'portrait' : 'portrait';
            doc.pageSize = 'A4';
            doc.pageMargins = [30, 60, 30, 40];

            if (!doc.styles) doc.styles = {};
            doc.styles.tableHeader = doc.styles.tableHeader || {};
            doc.styles.tableHeader.fillColor = doc.styles.tableHeader.fillColor || '#2c3e50';
            doc.styles.tableHeader.color = doc.styles.tableHeader.color || 'white';
            doc.styles.tableHeader.bold = true;

            doc.defaultStyle = doc.defaultStyle || {};
            doc.defaultStyle.fontSize = doc.defaultStyle.fontSize || 10;

            var tableIndex = findTableNodeIndex(doc);
            var datetime = buildDatetimeString();

            var headerBlock = [
                { text: title || '', alignment: 'center', fontSize: 14, bold: true, margin: [0, 0, 0, 6] },
                { text: 'Generated on: ' + datetime, alignment: 'center', bold: false, fontSize: 9, margin: [0, 0, 0, 8] },
                { text: '\n' }
            ];

            if (tableIndex >= 0) {
                // insert header right before the table node
                doc.content.splice(tableIndex, 0, ...headerBlock);
                tableIndex += headerBlock.length;
                var tableObj = doc.content[tableIndex];
                if (tableObj && tableObj.table && tableObj.table.body) {
                    var body = tableObj.table.body;

                    // correct first column to be serial numbers
                    for (var r = 1; r < body.length; r++) {
                        body[r][0] = { text: (r).toString(), alignment: 'center' };
                    }

                    // style header row
                    if (body[0]) {
                        for (var c = 0; c < body[0].length; c++) {
                            if (typeof body[0][c] === 'string') {
                                body[0][c] = { text: body[0][c], style: 'tableHeader', bold: true, alignment: 'center' };
                            } else if (body[0][c] && body[0][c].text) {
                                body[0][c].style = body[0][c].style || 'tableHeader';
                                body[0][c].alignment = body[0][c].alignment || 'center';
                                body[0][c].bold = true;
                            }
                        }
                    }

                    var objLayout = {};
                    objLayout['hLineWidth'] = function (i) { return 0.5; };
                    objLayout['vLineWidth'] = function (i) { return 0.5; };
                    objLayout['hLineColor'] = function (i) { return '#aaa'; };
                    objLayout['vLineColor'] = function (i) { return '#aaa'; };
                    objLayout['paddingLeft'] = function (i) { return 6; };
                    objLayout['paddingRight'] = function (i) { return 6; };
                    tableObj.layout = objLayout;
                }
            } else {
                doc.content.splice(0, 0, ...headerBlock);
            }

            doc.footer = function (currentPage, pageCount) {
                return {
                    columns: [
                        { text: 'Generated on: ' + datetime, alignment: 'left', margin: [30, 0, 0, 0] },
                        { text: 'Page ' + currentPage.toString() + ' of ' + pageCount.toString(), alignment: 'right', margin: [0, 0, 30, 0] }
                    ],
                    fontSize: 9
                };
            };
        } catch (e) {
            console.error('pdfCustomizeGeneric error', e);
        }
    }
    // Excel customization function
    function excelCustomize(xlsx, title) {
        try {
            var sheet = xlsx.xl.worksheets['sheet1.xml'];
            if (sheet) {
                $('sheetData row:first', sheet).before(`<row r="1"><c t="inlineStr" r="A1"><is><t>${title}</t></is></c></row>`);
                $('row:nth-child(2) c', sheet).attr('s', '2');
            }
        } catch (e) {
            console.error('excelCustomize error', e);
        }
    }
    // Print customization function
    function printCustomize(win, title) {
        try {
            $(win.document.body).css('font-size', '12pt').prepend(`<h3 class="text-center mb-3">${title}</h3>`);
            $(win.document.body).find('table').addClass('compact table-bordered').css('font-size', 'inherit');
        } catch (e) {
            console.error('printCustomize error', e);
        }
    }

    // ------------------- EXPORT BUTTON FACTORIES -------------------
    // checkboxSelector => selector for row checkbox inside each row (example: '.rowCheckbox')
    function makeExportButton(type, text, checkboxSelector, title, orientation) {
        title = title || "Report";
        orientation = orientation || "portrait";

        var btn = {
            extend: type,
            text: text,
            action: function (e, dt, button, config) {
                if (checkboxSelector) {
                    const selected = $(checkboxSelector + ":checked");
                    if (selected.length === 0) {
                        toastr.warning("Please select at least one row!", "Warning");
                        return;
                    }
                }
                $.fn.dataTable.ext.buttons[type].action.call(this, e, dt, button, config);
            },
            exportOptions: {
                columns: ':visible:not(:first-child):not(:last-child)',
                rows: function (idx, data, node) {
                    if (!checkboxSelector) return true;
                    return $(node).find(checkboxSelector).is(':checked');
                },
                format: {
                    body: function (data, row, column, node) {
                        var div = document.createElement("div");
                        div.innerHTML = data;
                        if (div.querySelector("i.bi-currency-rupee")) {
                            return "₹ " + div.textContent.trim();
                        }
                        if (div.querySelector("span.badge")) {
                            return div.textContent.trim();
                        }
                        return div.textContent.trim() || data;
                    }
                }
            },
            customize: function (doc) {
                if (type === 'pdfHtml5') {
                    pdfCustomizeGeneric(doc, title, orientation);
                }
            },
            customizeData: function (data) {
                if (type === 'excelHtml5') {
                    excelCustomize(data, title);
                }
            },
            customizePrint: function (win) {
                if (type === 'print') {
                    printCustomize(win, title);
                }
            }
        };

        return btn;
    }
        function makeChildExportButton(type, text, checkboxSelector, title, orientation) {
        var btn = makeExportButton(type, text, checkboxSelector, title, orientation);
        btn.exportOptions.columns = ':visible:not(:first-child)';
        btn.exportOptions.footer = true;
        return btn;
    }
   // ---------------- INIT TABLE ----------------
    function initTable(fromDate, toDate) {
        if (table) { table.destroy(); $('#AllGRNSummaryListPSM tbody').empty(); }

        table = $('#GRNSummaryPSM').DataTable({
            dom: '<"d-flex justify-content-between align-items-center mb-2"Bf>rt<"d-flex justify-content-between align-items-center"i p>',
            responsive: true,
            processing: true,
            ajax: {
                url: '@Url.Action("AllGRNSummaryListPSM", "GRN")',
                data: { fromDate: fromDate || null, toDate: toDate || null },
                dataSrc: "data"
            },
            columns: [
                {
                    data: null,
                    orderable: false,
                    render: function (d, type, row, meta) {
                        return '<input type="checkbox" class="rowCheckbox" value="' + (d.GRNCode || '') + '"/>';
                    }
                },
                {
                    data: null,
                    render: function (d, type, row, meta) {
                        return meta.row + 1;
                    }
                },
                { data: "GRNCode" },
                { data: "POCode" },
                { data: "VendorName" },
                { data: "CompanyName" },
                {
                    data: "AddedDate",
                    render: function (d) {
                        return d ? new Date(d).toLocaleDateString("en-GB") : "";
                    }
                },
                {
                    data: "TotalAmount",
                    render: function (d) {
                        return d ? '<i class="bi bi-currency-rupee text-secondary"></i> ' + parseFloat(d).toLocaleString("en-IN", { minimumFractionDigits: 2 }) : "-";
                    }
                },
                {
                    data: "StatusName",
                    render: function (d) {
                        if (d === "Completed") return '<span class="badge bg-primary fw-semibold">' + d + '</span>';
                        if (d === "InProcess") return '<span class="badge bg-danger fw-semibold">' + d + '</span>';
                        if (d === "PartiallyCompleted") return '<span class="badge bg-success fw-semibold">' + d + '</span>';
                        return d || '';
                    }
                },
                {
                    data: "GRNCode",
                    orderable: false,
                    render: function (d) {
                        return '<button type="button" class="btn-sm btn btn-primary viewItemsBtn" data-grn="' + d + '" data-bs-toggle="tooltip" title="View GRN"><i class="bi bi-eye"></i></button>';
                    }
                }
            ],
            buttons: [
                makeExportButton('print', '<i class="bi bi-printer-fill text-dark fs-5"></i>', '.rowCheckbox', 'GRN Summary Report', 'landscape'),
                makeExportButton('pdfHtml5', '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>', '.rowCheckbox', 'GRN Summary Report', 'landscape'),
                makeExportButton('excelHtml5', '<i class="bi bi-file-earmark-excel text-dark fs-5"></i>', '.rowCheckbox', 'GRN Summary Report'),
                makeExportButton('csvHtml5', '<i class="bi bi-filetype-csv text-success fs-5"></i>', '.rowCheckbox', 'GRN Summary Report')
            ],
            drawCallback: function () {
                $('#selectAll').prop('checked', $('.rowCheckbox:checked').length === $('.rowCheckbox').length);
                loadPieChart(currentFrom, currentTo);
                var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                tooltipTriggerList.map(function (tooltipTriggerEl) {
                    return new bootstrap.Tooltip(tooltipTriggerEl);
                });
            }
        });
    }
    // ---------------- LOAD GRN ITEMS ----------------
function loadGRNItems(GRNCode) {
    if (itemsTable) { itemsTable.destroy(); $('#GRNItemsTablePSM tbody').empty(); }

    itemsTable = $('#GRNItemsTablePSM').DataTable({
        dom: '<"d-flex justify-content-between align-items-center mb-2"Bf>rt<"d-flex justify-content-between align-items-center"i p>',
        responsive: true,
        processing: true,
        ajax: {
            url: '@Url.Action("GRNItemsPSM","GRN")',
            type: 'GET',
            data: { GRNCode: GRNCode },
            dataSrc: 'data'
        },
        columns: [
            {
                data: null,
                orderable: false,
                render: function (d) {
                    return '<input type="checkbox" class="rowCheckboxItem" value="' + (d.ItemName || '') + '"/>';
                }
            },
            {
                data: null,
                render: function (d, type, row, meta) {
                    return meta.row + 1;
                }
            },
            { data: "ItemName" },
            {
                data: "CostPerUnit",
                render: function (d) {
                    return d ? '<i class="bi bi-currency-rupee text-secondary"></i> ' + parseFloat(d).toLocaleString("en-IN", { minimumFractionDigits: 2 }) : "-";
                }
            },
            { data: "UnitQuantity", render: $.fn.dataTable.render.number(',', '.', 2) },
            { data: "Discount" },
            { data: "TaxRate" },
            {
                data: "FinalAmount",
                render: function (d) {
                    return d ? '<i class="bi bi-currency-rupee text-secondary"></i> ' + parseFloat(d).toLocaleString("en-IN", { minimumFractionDigits: 2 }) : "-";
                }
            }
        ],
        buttons: [
            makeChildExportButton('print', '<i class="bi bi-printer-fill text-dark fs-5"></i>', '.rowCheckboxItem', 'GRN Items'),
            makeChildExportButton('pdfHtml5', '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>', '.rowCheckboxItem', 'GRN Items', 'portrait'),
            makeChildExportButton('excelHtml5', '<i class="bi bi-file-earmark-excel text-dark fs-5"></i>', '.rowCheckboxItem', 'GRN Items'),
            makeChildExportButton('csvHtml5', '<i class="bi bi-filetype-csv text-success fs-5"></i>', '.rowCheckboxItem', 'GRN Items')
        ],
        footerCallback: function (row, data, start, end, display) {
            var api = this.api();
            var total = 0;
            api.rows({ page: 'current' }).every(function () {
                var $row = $(this.node());
                var finalVal = parseFloat(this.data().FinalAmount) || 0;
                if ($row.find('input.rowCheckboxItem').is(':checked')) {
                    total += finalVal;
                }
            });
            var footerCell = $(api.table().footer()).find('th').last();
            if (footerCell.length) {
                footerCell.html('<i class="bi bi-currency-rupee text-secondary"></i> ' + total.toFixed(2))
                    .css({ 'color': 'Orange', 'font-weight': 'bold' });
            }
        }
    });
}
    // ---------------- LOAD PIE CHART ----------------
   function loadPieChart(fromDate, toDate) {
    let url = '@Url.Action("GRNPieChartPSM","GRN")';
    if (fromDate && toDate) url += `?fromDate=${fromDate}&toDate=${toDate}`;

    fetch(url)
        .then(res => res.json())
        .then(data => {
            if (!Array.isArray(data)) data = [];

            // Total GRN count from your table (if DataTable exists)
            let totalGRN = table ? table.rows({ filter: "applied" }).count() : 0;

            // Handle no data case
            if (!data.length) {
                $("#grnTotalCountPSM").text("0"); // Update counter if you have one
                Highcharts.chart('grnPieChartPSM', {
                    chart: { type: 'pie', height: 400 },
                    title: { text: 'No Data Available' },
                    subtitle: {
                        text: 'Total GRN Count: <b>0</b>',
                        align: 'left',
                        verticalAlign: 'top',
                        floating: true,
                        style: { fontSize: '14px', fontWeight: 'bold', color: '#28a745' }
                    },
                    series: [{ name: 'GRN Count', data: [] }],
                    credits: { enabled: false },
                    lang: { noData: "No Data Available in chart" },
                    noData: { style: { fontWeight: 'bold', fontSize: '14px', color: '#ff0000' } }
                });
                return; // Stop here if no data
            }

            // Normal chart rendering
            $("#grnTotalCountPSM").text(totalGRN); // Update total count
            Highcharts.chart('grnPieChartPSM', {
                chart: { type: 'pie', height: 400 },
                title: { text: '' },
                subtitle: {
                    text: 'Total GRN Count: <b>' + totalGRN + '</b>',
                    align: 'left',
                    verticalAlign: 'top',
                    floating: true,
                    style: { fontSize: '14px', fontWeight: 'bold', color: '#28a745' }
                },
                tooltip: { pointFormat: '{series.name}: <b>{point.y}</b>' },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        dataLabels: { enabled: true, format: '<b>{point.name}</b>: {point.y}' },
                        point: {
                            events: {
                                click: function () {
                                    if (table) {
                                        table.column(8).search("^" + this.name + "$", true, false).draw();
                                    }
                                }
                            }
                        }
                    }
                },
                series: [{
                    name: 'GRN Count',
                    colorByPoint: true,
                    data: data.map(d => ({ name: d.StatusName, y: d.TotalGRN }))
                }],
                credits: { enabled: false }
            });
        })
        .catch(err => console.error('Error loading pie chart data:', err));
}


    // ---------------- DOCUMENT READY ----------------
    $(document).ready(function () {
        initTable(null, null);
        $(document).on("change", "#selectAll", function () {
            $(".rowCheckbox").prop("checked", this.checked);
        });
        $(document).on("change", ".rowCheckbox", function () {
            $("#selectAll").prop('checked', $(".rowCheckbox:checked").length === $(".rowCheckbox").length);
        });
        $(document).on("click", ".viewItemsBtn", function () {
            loadGRNItems($(this).data("grn"));
            $("#grnItemsModal").modal("show");
        });
        $(document).on("change", "#selectAllItems", function () {
            $(".rowCheckboxItem").prop("checked", this.checked).trigger("change");
        });

        $(document).on("change", ".rowCheckboxItem", function () {
            if (itemsTable) itemsTable.draw(false);
        });
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    });
</script>
