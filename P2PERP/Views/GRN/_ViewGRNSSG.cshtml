@{
    Layout = null;
}

<div class="card shadow p-4">
    <!-- Header info -->
    <div class="row mb-2">
        <div class="col-md-4">
            <label>PONO:</label>
            <input type="text" class="form-control form-control-sm bg-light" id="txtPONumberUnique" value="@ViewBag.POCode" readonly>
        </div>
        <div class="col-md-4">
            <label>PODATE:</label>
            <input type="date" class="form-control form-control-sm bg-light" id="txtPODateUnique" value="@ViewBag.PODate" readonly>
        </div>
        <div class="col-md-4">
            <label>VENDOR NAME:</label>
            <input type="text" class="form-control form-control-sm bg-light" id="txtVendorNameUnique" value="@ViewBag.VendorName" readonly>
        </div>
    </div>

    <!-- GRN / Invoice info -->
    <div class="row mb-2">
        <div class="col-md-4">
            <label>GRNNO:</label>
            <input type="text" class="form-control form-control-sm bg-light" id="txtGRNNumberUnique" value="@ViewBag.GRNCode" readonly>
        </div>
        <div class="col-md-4">
            <label>INVOICE NO:</label>
            <input type="text" class="form-control form-control-sm bg-light" id="txtInvoiceNumberUnique" value="@ViewBag.InvoiceNo" readonly>
        </div>
        <div class="col-md-4">
            <label>INVOICE DATE:</label>
            <input type="date" class="form-control form-control-sm bg-light" id="txtInvoiceDateUnique" value="@ViewBag.InvoiceDate" readonly>
        </div>
    </div>

    <!-- Addresses -->
    <div class="row mb-2">
        <div class="col-md-6">
            <label>COMPANY ADDRESS:</label>
            <textarea class="form-control form-control-sm bg-light" rows="2" id="txtCompanyAddressUnique" readonly>@ViewBag.CompanyAddress</textarea>
        </div>
        <div class="col-md-6">
            <label>BILLING ADDRESS:</label>
            <textarea class="form-control form-control-sm bg-light" rows="2" id="txtBillingAddressUnique" readonly>@ViewBag.BillingAddress</textarea>
        </div>
    </div>

    <h4 class="mt-3">Item Details</h4>

    <div class="table-responsive shadow p-2 bg-white rounded">
        <table class="table table-bordered table-sm text-center align-middle" id="tblGRNItemsUnique">
            <thead class="table-dark">
                <tr>
                    <th><input type="checkbox" id="chkSelectAllUnique" /></th>
                    <th>Sr. No.</th>
                    <th>Item Name</th>
                    <th>Quality Check</th>
                    <th>PO Qty</th>
                    <th>GRN Qty</th>
                    <th>Remaining Qty</th>
                    <th>Unit Rate</th>
                    <th>Discount %</th>
                    <th>GST %</th>
                    <th>Amount (₹)</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <!-- Total -->
    <div class="row mt-3">
        <div class="col-md-4 offset-md-8">
            <div class="input-group input-group-lg">
                <span class="input-group-text fw-bold">Total Amount (₹)</span>
                <input type="text" id="txtTotalAmountUnique"
                       class="form-control text-end fw-bold bg-light text-dark" readonly />
            </div>
        </div>
    </div>
</div>

<script>
$(document).ready(function () {
    const GRNCode = '@ViewBag.GRNCode';
    toastr.options = { closeButton: true, progressBar: true, positionClass: "toast-top-right", timeOut: "3000" };

    const parseNum = val => !val ? 0 : parseFloat(String(val).replace(/[,₹\s%]+/g,'').replace(/[^0-9.\-]/g,'')) || 0;

    // Initialize DataTable
    const tableUnique = $('#tblGRNItemsUnique').DataTable({
        ajax: {
            url: '/GRN/GetGRNItemsSSG',
            type: 'GET',
            data: { GRNCode },
            dataSrc: json => (json && json.success && Array.isArray(json.items)) ? json.items : []
        },
        columns: [
            { data: "ItemCode", orderable: false, render: d => `<input type="checkbox" class="chkRowUnique" value="${d}" />` },
            { data: null, render: (d,t,r,m) => m.row + 1 },
            { data: "ItemName" },
            { data: "qc" },
            { data: "POQuantity" },
            { data: "GRNQuantity" },
            { data: "RemainingQuantity" },
            { data: "UnitRate", render: d => parseNum(d).toFixed(2) },
            { data: "Discount", render: d => parseNum(d).toFixed(2) + " %" },
            { data: "GST", render: d => parseNum(d).toFixed(2) + " %" },
            { data: null, render: d => {
                const qty=parseNum(d.GRNQuantity), rate=parseNum(d.UnitRate),
                      discount=parseNum(d.Discount), gst=parseNum(d.GST),
                      base=qty*rate, afterDiscount=base-(base*discount/100);
                return (afterDiscount + (afterDiscount*gst/100)).toFixed(2);
            } }
        ],
        dom:'<"row mb-3"<"col-md-6 d-flex gap-2 align-items-center"B><"col-md-6 d-flex justify-content-end"f>>t<"row mt-3"<"col-md-6"i><"col-md-6 d-flex justify-content-end"p>>',
        buttons: [
            // --- PRINT ---
            {
                extend: 'print',
                text: '<i class="bi bi-printer-fill fs-5"></i>',
                title: 'GRN Items List',
                exportOptions: {
                    columns: [2, 3, 4, 5, 6, 7, 8, 9, 10],
                    rows: (idx, data, node) => $(node).find('.chkRowUnique').is(':checked')
                },
                customize: function (win) {
                    let sn = 0;
                    // Insert S.No. header
                    $(win.document.body).find('table thead tr').prepend('<th>S.No.</th>');
                    // Auto numbering
                    $(win.document.body).find('table tbody tr').each(function () {
                        $(this).prepend('<td>' + (++sn) + '</td>');
                    });
                    // Header styling
                    $(win.document.body).find('table thead th').css({
                        'background-color': '#000',
                        'color': '#fff'
                    });
                },
                action: function (e, dt, btn, config) {
                    if ($('#tblGRNItemsUnique tbody .chkRowUnique:checked').length === 0) {
                        toastr.warning("Select at least one row before printing!");
                        return;
                    }
                    $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, btn, config);
                }
            },

            // --- PDF ---
            {
                extend: 'pdfHtml5',
                text: '<i class="bi bi-file-earmark-pdf fs-5 text-danger"></i>',
                title: `GRN Items List - ${moment().format("YYYY-MM-DD")}`,
                exportOptions: {
                    columns: [2, 3, 4, 5, 6, 7, 8, 9, 10],
                    rows: (idx, data, node) => $(node).find('.chkRowUnique').is(':checked')
                },
                customize: function (doc) {
                    let sn = 0;
                    // Insert S.No. header
                    doc.content[1].table.body[0].unshift({
                        text: 'S.No.', bold: true, fillColor: '#000', color: '#fff', alignment: 'center'
                    });
                    // Auto numbering
                    doc.content[1].table.body.forEach(function (row, idx) {
                        if (idx === 0) return;
                        row.unshift({ text: (++sn).toString(), alignment: 'center' });
                    });
                    // Add table borders
                    doc.content[1].layout = {
                        hLineWidth: () => 1, vLineWidth: () => 1,
                        hLineColor: () => '#000', vLineColor: () => '#000'
                    };
                },
                action: function (e, dt, btn, config) {
                    if ($('#tblGRNItemsUnique tbody .chkRowUnique:checked').length === 0) {
                        toastr.warning("Select at least one row before exporting PDF!");
                        return;
                    }
                    $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, btn, config);
                }
            },
            {
                extend: 'excelHtml5',
                text: '<i class="bi bi-file-earmark-excel fs-5 text-success"></i>',
                title: `GRN Items List - ${moment().format("YYYY-MM-DD")}`,
                exportOptions: {
                    // exclude Sr. No. column from export (assume it's column 1)
                    columns: [2, 3, 4, 5, 6, 7, 8, 9, 10],
                    rows: ':visible'
                },
                customize: function (xlsx) {
                    var sheet = xlsx.xl.worksheets['sheet1.xml'];
                    var rows = $('row', sheet);
                    let sn = 0;

                    // --- Fix header row (row 2, because row 1 = title) ---
                    var header = rows.eq(1);
                    header.prepend(
                        '<c r="A2" t="inlineStr"><is><t>S.No.</t></is></c>'
                    );

                    // --- Add serial numbers in data rows ---
                    rows.each(function (i) {
                        if (i <= 1) return; // skip title + header

                        var rowNum = $(this).attr('r');
                        $(this).prepend(
                            '<c r="A' + rowNum + '" t="n"><v>' + (++sn) + '</v></c>'
                        );
                    });

                    // --- Recalculate cell references ---
                    rows.each(function () {
                        var rowNum = $(this).attr('r');
                        var colCode = 65; // 'A'
                        $('c', this).each(function () {
                            $(this).attr('r', String.fromCharCode(colCode) + rowNum);
                            colCode++;
                        });
                    });
                },
                action: function (e, dt, btn, config) {
                    $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, btn, config);
                }
            },


            // --- CSV ---
            {
                extend: 'csvHtml5',
                text: '<i class="bi bi-filetype-csv fs-5 text-secondary"></i>',
                title: `GRN_Items_List_${moment().format("YYYY-MM-DD")}`,
                exportOptions: {
                    columns: [2, 3, 4, 5, 6, 7, 8, 9, 10],
                    rows: (idx, data, node) => $(node).find('.chkRowUnique').is(':checked')
                },
                customize: function (csv) {
                    let lines = csv.split('\n');

                    // Add S.No. to header
                    if (lines.length > 0) {
                        lines[0] = 'S.No.,' + lines[0];
                    }

                    // Add S.No. to each row
                    for (let i = 1; i < lines.length; i++) {
                        if (lines[i].trim() !== '') {
                            lines[i] = i + ',' + lines[i];
                        }
                    }
                    return lines.join('\n');
                },
                action: function (e, dt, btn, config) {
                    if ($('#tblGRNItemsUnique tbody .chkRowUnique:checked').length === 0) {
                        toastr.warning("Select at least one row before exporting CSV!");
                        return;
                    }
                    $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, btn, config);
                }
            }
        ],

        order:[[1,'asc']], paging:true, searching:true, info:false, lengthChange:false, responsive:true
    });

    // ✅ Total calculation for all rows by default
    function updateTotalAmountUnique() {
        let total = 0;

        tableUnique.rows().every(function () {
            const row = this.data();
            const qty = parseNum(row.GRNQuantity);
            const rate = parseNum(row.UnitRate);
            const discount = parseNum(row.Discount);
            const gst = parseNum(row.GST);

            const base = qty * rate;
            const afterDiscount = base - (base * discount / 100);
            total += afterDiscount + (afterDiscount * gst / 100);
        });

        $('#txtTotalAmountUnique').val(total.toFixed(2));
    }

    // Call once after table initialization
    tableUnique.on('init', function () {
        updateTotalAmountUnique();
    });

    // Also call after every draw (e.g., pagination)
    tableUnique.on('draw', updateTotalAmountUnique);
    // ✅ Select/Deselect All rows
    $(document).on('change', '#chkSelectAllUnique', function () {
        const checked = $(this).is(':checked');
        $('#tblGRNItemsUnique tbody .chkRowUnique').prop('checked', checked);
    });

    // ✅ Update Select All checkbox status based on individual row checkboxes
    $(document).on('change', '.chkRowUnique', function () {
        const allChecked = $('#tblGRNItemsUnique tbody .chkRowUnique').length ===
            $('#tblGRNItemsUnique tbody .chkRowUnique:checked').length;
        $('#chkSelectAllUnique').prop('checked', allChecked);
    });

});
</script>
